(function($) {

/**
 * A class that provides additional functionality to the pagination features
 * provided for certain class-blogs plugin admin pages that display large
 * amounts of paginated data.
 *
 * This primarily provides the user with the ability to enter the page number
 * that they wish to go to and then hit enter, in the same manner as the
 * admin pagination interface used by the core WordPress pages.
 *
 * @class Paginator
 *
 * @param tablenav {String|Object} a CSS identifier for a WordPress .tablenav
 *                                 instance or a DOM reference to the same
 */
var Paginator = function(tablenav) {
	this._$controls = $(tablenav).find(Paginator._CSS.controls);
	this._totalPages = this._getTotalPages();
	this._registerEventListeners();
};

/**
 * CSS identifiers used by the paginator.
 *
 * @property _CSS
 * @type {Object}
 * @private
 * @static
 */
Paginator._CSS = {
	'controls':    '.paging-input',
	'pageInput':   '.current-page',
	'totalPages':  '.total-pages'
};

/**
 * The name of the query var that indicates the current page.
 *
 * @property _PAGE_QUERY_VAR
 * @type {String}
 * @private
 * @static
 */
Paginator._PAGE_QUERY_VAR = "paged";

/**
 * A regular expression to find a current-page query var in the URL.
 *
 * @property _PAGE_QUERY_VAR_SEARCH
 * @type {Object}
 * @private
 * @static
 */
Paginator._PAGE_QUERY_VAR_SEARCH = new RegExp("&?" + Paginator._PAGE_QUERY_VAR + "=[0-9]+");

/**
 * A jQuery-wrapped reference to the pagination controls.
 *
 * @property _$controls
 * @type {Object}
 * @default null
 * @private
 */
Paginator.prototype._$controls = null;

/**
 * The total number of pages of paginated data available.
 *
 * @property _totalPages
 * @type {Number}
 * @default 0
 * @private
 */
Paginator.prototype._totalPages = 0;

/**
 * Returns the total number of pages available for the paginated data.
 *
 * This is done by examining the markup for the pagination links, which contains
 * a <span> wrapper around the total page count.
 *
 * @method _getTotalPages
 * @private
 *
 * @return {Number} the total number of pages available
 */
Paginator.prototype._getTotalPages = function() {
	var total = parseInt(this._$controls.find(Paginator._CSS.totalPages).html());
	return (isNaN(total)) ? 0 : total;
};

/**
 * Register the event listeners needed make the paginator work.
 *
 * This is mainly used to bind a keypress event listener to the input box showing
 * the current page number, which is used to send the user to the requested page.
 *
 * @method _registerEventListeners
 * @private
 */
Paginator.prototype._registerEventListeners = function() {
	this._$controls.find(Paginator._CSS.pageInput).keypress(
		$.proxy(this._watchForSubmission, this)).click(this._selectPageInput);
};

/**
 * Selects the text contained in the page input box.
 *
 * This is registered as a click event listener that makes the page input's text
 * be selected whenever the user clicks on the input box.
 *
 * @method _selectPageInput
 * @private
 *
 * @param e {Object} an event object from clicking on the page input box
 */
Paginator.prototype._selectPageInput = function(e) {
	$(this).select();
};

/**
 * Watches the paginator's page input box for a submission event such as a return.
 *
 * @method _watchForSubmission
 * @private
 *
 * @param e {Object} an event object generated by a keypress in the page input box
 */
Paginator.prototype._watchForSubmission = function(e) {
	if (e.which == 13) {
		this._goToPage(parseInt($(e.target).val()));
	}
};

/**
 * Takes the user to the requested page of paginated data.
 *
 * If the requested page is higher than the maximum number of pages available,
 * the user is taken to the last page of data.
 *
 * @param page {Number} the page number the user would like to see
 */
Paginator.prototype._goToPage = function(page) {
	if (!isNaN(page)) {

		// Strip the current page number query param from the URL if needed
		var url = document.URL;
		url = url.replace(Paginator._PAGE_QUERY_VAR_SEARCH, "");

		// Send the user to the requested page
		var separator = (url.indexOf("?") > 0) ? "&" : "?";
		var newPage = Math.max(1, Math.min(page, this._totalPages));
		window.location.href = url + separator + Paginator._PAGE_QUERY_VAR + "=" + newPage;
	}
};

/**
 * Register the paginators when the page is ready
 */
$(document).ready(function() {
	$(".tablenav.class-blogs").each(function(i, el) {
		new Paginator(el);
	});
});

})(jQuery);
